
{ ... }
1.0 | 1.1;
abort | stop;
address;
address | CIDR;
address | CIDR | unix:;
address | CIDR | unix: | all;
address | off;
address [ parameters ];
address: port [ bind ];
address [: port ] [ default_server ] [ ssl ] [ spdy ] [ proxy_protocol ] [ setfib = number ] [ fastopen = number ] [ backlog = number ] [ rcvbuf = size ] [ sndbuf = size ] [ accept_filter = filter ] [ deferred ] [ bind ] [ ipv6only = on | off ] [ so_keepalive = on | off |[ keepidle ]:[ keepintvl ]:[ keepcnt ]]; listen port [ default_server ] [ ssl ] [ spdy ] [ proxy_protocol ] [ setfib = number ] [ fastopen = number ] [ backlog = number ] [ rcvbuf = size ] [ sndbuf = size ] [ accept_filter = filter ] [ deferred ] [ bind ] [ ipv6only = on | off ] [ so_keepalive = on | off |[ keepidle ]:[ keepintvl ]:[ keepcnt ]]; listen unix: path [ default_server ] [ ssl ] [ spdy ] [ proxy_protocol ] [ backlog = number ] [ rcvbuf = size ] [ sndbuf = size ] [ accept_filter = filter ] [ deferred ] [ bind ] [ so_keepalive = on | off |[ keepidle ]:[ keepintvl ]:[ keepcnt ]];
address: port [ ssl ] [ bind ] [ ipv6only = on | off ] [ so_keepalive = on | off |[ keepidle ]:[ keepintvl ]:[ keepcnt ]];
address... [ valid = time ] [ ipv6 = on | off ];
address... [ valid = time ]; resolver off;
[ $address ] $variable { ... }
all | any;
browser version; modern_browser unlisted;
charset;
charset1 charset2 { ... }
charset | off;
ciphers;
code;
code... [ = [ response ]] uri;
code [ text ]; return code URL; return URL;
[ code...] time;
( condition ) { ... }
connect | first_byte | last_byte;
connections;
cookie name [ expires= time ] [ domain= domain ] [ httponly ] [ secure ] [ path= path ]; sticky route $variable...; sticky learn create= $variable lookup= $variable zone= name: size [ timeout= time ];
cpumask...;
curve;
default; proxy_redirect off; proxy_redirect redirect replacement;
device;
directory;
error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off...;
error | timeout | invalid_header | http_500 | http_503 | http_403 | http_404 | off...;
error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off...;
error | timeout | invalid_header | updating | http_500 | http_503 | http_403 | http_404 | off...;
error | timeout | invalid_response | not_found | off...;
expression;
extension...;
field;
field...;
field value;
field | X-Real-IP | X-Forwarded-For | proxy_protocol;
file;
file...;
file | mask;
file | stderr | syslog: server = address [, parameter = value ] | memory: size [ debug | info | notice | warn | error | crit | alert | emerg ];
file... uri; try_files file... = code;
flag;
GET | HEAD | POST...;
header | last_byte;
header value;
html | xml | json | jsonp;
imap | pop3 | smtp;
info | notice | warn | error;
interval;
json; status_format jsonp [ callback ];
key [ consistent ];
key zone = name: size;
key zone = name: size rate = rate;
length;
letter | digit | = | off;
level;
max = N [ inactive = time ] [ min_uses = N ] [ valid = time ]; open_log_file_cache off;
method;
method... { ... }
method...;
mime-type;
mime-type...;
[ modified ] time; expires epoch | max | off;
module;
module:: function |'sub { ... }';
name { ... }
name;
name...;
name [ expires= time ] [ domain= domain ] [ path= path ];
name | none;
name | off;
name size;
name string...;
name threads = number [ max_queue = number ];
name value [ always ];
name $variable size;
none | blocked | server_names | string...;
none | browser...;
number;
number | auto;
number size;
number [ timeout = time ];
off; disable_symlinks on | if_not_owner [ from = part ];
off | exact | before;
off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any...;
off; image_filter test; image_filter size; image_filter rotate 90 | 180 | 270; image_filter resize width height; image_filter crop width height;
off | method...;
off | none | [ builtin [: size ]] [ shared: name: size ];
off | on | always;
off; open_file_cache max = N [ inactive = time ];
off; proxy_cookie_domain domain replacement;
off; proxy_cookie_path path replacement;
on | clean | off;
on | off;
on | off | always;
on | off | factor;
on | off | only;
on | off | optional | optional_no_ca;
on | off | string;
on | off | threads [ = pool ];
on | v1 | log | off;
[ parameters ];
parameter value;
parameter value [ if_not_empty ];
path;
path [ format [ buffer = size [ flush = time ]] [ if = condition ]]; access_log path format gzip[= level ] [ buffer = size ] [ flush = time ] [ if = condition ]; access_log syslog: server = address [, parameter = value ] [ format [ if = condition ]]; access_log off;
path [ level1 [ level2 [ level3 ]]];
path [ levels = levels ] [ use_temp_path = on | off ] keys_zone = name: size [ inactive = time ] [ max_size = size ] [ loader_files = number ] [ loader_sleep = time ] [ loader_threshold = time ];
path zone = name: size [ format = format ] [ timeout = time ] [ id = id ] [ md5 = md5 ] ;
percent;
[ protocol://] address;
quality;
rate;
regex;
regex...;
regex replacement [ flag ];
size;
size | off;
[ SSLv2 ] [ SSLv3 ] [ TLSv1 ] [ TLSv1.1 ] [ TLSv1.2 ];
string ...;
string;
string...;
string | none;
string | off;
string replacement;
string $variable { ... }
stylesheet [ parameter = value...];
time;
time | max | off;
timeout;
timeout [ header_timeout ];
uri;
[ = | ~ | ~* | ^~ ] uri { ... } location @ name { ... }
uri | off;
url;
URL;
user [ group ];
users: permissions...;
value;
$variable module:: function |'sub { ... }';
$variable value;
variable [= value ];
variable value;
word;
zone;
zone = name [ burst = number ] [ nodelay ];
zone number;
zone | off;
